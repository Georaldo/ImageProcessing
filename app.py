{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a59ccfe-f010-47b5-b104-ecf2ec8637ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os, sys, json, time, uuid\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import cv2\n",
    "import streamlit as st\n",
    "\n",
    "# Dlib embeddings via face_recognition\n",
    "import face_recognition\n",
    "\n",
    "# DeepFace for Facenet512 and ArcFace\n",
    "from deepface import DeepFace\n",
    "\n",
    "print(\"Python:\", sys.version)\n",
    "print(\"NumPy:\", np.__version__)\n",
    "print(\"OpenCV:\", cv2.__version__)\n",
    "print(\"DeepFace:\", DeepFace.__version__)\n",
    "try:\n",
    "    import face_recognition.api as _fr_api\n",
    "    print(\"face_recognition loaded\")\n",
    "except Exception as e:\n",
    "    print(\"face_recognition import issue:\", e)\n",
    "\n",
    "# Try to import LBPH (opencv-contrib). If missing, we'll do histogram fallback.\n",
    "_has_contrib = hasattr(cv2, \"face\") and hasattr(cv2.face, \"LBPHFaceRecognizer_create\")\n",
    "print(\"OpenCV contrib (LBPH) available:\", _has_contrib)\n",
    "\n",
    "\n",
    "# ==== Config Paths ====\n",
    "CSV_FILE = \"students.csv\"\n",
    "QR_FOLDER = \"qrcodes\"\n",
    "EMBED_FOLDER = \"embeddings\"\n",
    "META_FOLDER = \"metadata\"\n",
    "\n",
    "os.makedirs(QR_FOLDER, exist_ok=True)\n",
    "os.makedirs(EMBED_FOLDER, exist_ok=True)\n",
    "os.makedirs(META_FOLDER, exist_ok=True)\n",
    "\n",
    "# Helper to ensure dtype consistency when reading CSV\n",
    "def load_students_csv():\n",
    "    if os.path.exists(CSV_FILE):\n",
    "        df = pd.read_csv(CSV_FILE, dtype=str)\n",
    "        # expected columns\n",
    "        expected = {\"student_id\",\"name\",\"course\",\"qr_filename\",\n",
    "                    \"dlib_file\",\"facenet_file\",\"arcface_file\",\"opencv_file\",\"meta_file\"}\n",
    "        missing = [c for c in expected if c not in df.columns]\n",
    "        if missing:\n",
    "            # upgrade existing CSV by adding new columns\n",
    "            for c in missing:\n",
    "                df[c] = \"\"\n",
    "        return df\n",
    "    else:\n",
    "        cols = [\"student_id\",\"name\",\"course\",\"qr_filename\",\n",
    "                \"dlib_file\",\"facenet_file\",\"arcface_file\",\"opencv_file\",\"meta_file\"]\n",
    "        return pd.DataFrame(columns=cols)\n",
    "\n",
    "\n",
    "# ==== Face Utilities ====\n",
    "\n",
    "def detect_and_crop_face_bgr(frame_bgr, target_size=(160,160)):\n",
    "    if frame_bgr is None:\n",
    "        return None\n",
    "    rgb = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2RGB)\n",
    "    boxes = face_recognition.face_locations(rgb, model=\"hog\")\n",
    "    if len(boxes) == 0:\n",
    "        return None\n",
    "    top, right, bottom, left = boxes[0]\n",
    "    face = frame_bgr[top:bottom, left:right]\n",
    "    if face.size == 0:\n",
    "        return None\n",
    "    face = cv2.resize(face, target_size, interpolation=cv2.INTER_AREA)\n",
    "    return face\n",
    "\n",
    "def l2_normalize(vec, eps=1e-9):\n",
    "    v = np.asarray(vec, dtype=np.float32)\n",
    "    n = np.linalg.norm(v) + eps\n",
    "    return (v / n).astype(np.float32)\n",
    "\n",
    "def aggregate_embeddings(emb_list):\n",
    "    if not emb_list:\n",
    "        return None\n",
    "    M = np.vstack(emb_list).astype(np.float32)\n",
    "    mean = M.mean(axis=0)\n",
    "    return l2_normalize(mean)\n",
    "\n",
    "\n",
    "# ==== Embedding Generators ====\n",
    "\n",
    "def embed_dlib(face_bgr):\n",
    "    rgb = cv2.cvtColor(face_bgr, cv2.COLOR_BGR2RGB)\n",
    "    boxes = [(0, rgb.shape[1], rgb.shape[0], 0)]\n",
    "    encs = face_recognition.face_encodings(rgb, boxes, num_jitters=1, model=\"small\")\n",
    "    if len(encs) == 0:\n",
    "        return None\n",
    "    return l2_normalize(np.array(encs[0], dtype=np.float32))\n",
    "\n",
    "def embed_facenet(face_bgr):\n",
    "    res = DeepFace.represent(face_bgr, model_name=\"Facenet512\", detector_backend=\"retinaface\", enforce_detection=True)\n",
    "    if not res:\n",
    "        return None\n",
    "    emb = np.array(res[0][\"embedding\"], dtype=np.float32)\n",
    "    return l2_normalize(emb)\n",
    "\n",
    "def embed_arcface(face_bgr):\n",
    "    res = DeepFace.represent(face_bgr, model_name=\"ArcFace\", detector_backend=\"retinaface\", enforce_detection=True)\n",
    "    if not res:\n",
    "        return None\n",
    "    emb = np.array(res[0][\"embedding\"], dtype=np.float32)\n",
    "    return l2_normalize(emb)\n",
    "\n",
    "def embed_opencv(face_bgr):\n",
    "    gray = cv2.cvtColor(face_bgr, cv2.COLOR_BGR2GRAY)\n",
    "    hist = cv2.calcHist([gray], [0], None, [256], [0,256]).flatten().astype(np.float32)\n",
    "    hist = hist / (np.sum(hist) + 1e-9)\n",
    "    return l2_normalize(hist)\n",
    "\n",
    "\n",
    "# ==== Registration (Capture + Multi-backend Embeddings) ====\n",
    "\n",
    "def register_student_capture(student_id, name, course):\n",
    "    df = load_students_csv()\n",
    "\n",
    "    if (df[\"student_id\"] == student_id).any():\n",
    "        st.error(f\"Student ID '{student_id}' already exists.\")\n",
    "        return\n",
    "\n",
    "    # Create QR code\n",
    "    import qrcode\n",
    "    qr_path = os.path.join(QR_FOLDER, f\"{student_id}_qr.png\")\n",
    "    qrcode.make(student_id).save(qr_path)\n",
    "    st.info(f\"QR saved -> {qr_path}\")\n",
    "\n",
    "    cap = cv2.VideoCapture(0)\n",
    "    st.warning(\"Press the 'Capture Sample' button below several times (5â€“10) to register, then click 'Finish'.\")\n",
    "\n",
    "    dlib_list, facenet_list, arcface_list, opencv_list = [], [], [], []\n",
    "    captured = 0\n",
    "\n",
    "    frame_placeholder = st.empty()\n",
    "    btn_capture = st.button(\"Capture Sample\")\n",
    "    btn_finish = st.button(\"Finish\")\n",
    "\n",
    "    while True:\n",
    "        ok, frame = cap.read()\n",
    "        if not ok:\n",
    "            continue\n",
    "\n",
    "        face = detect_and_crop_face_bgr(frame, target_size=(160,160))\n",
    "        disp = frame.copy()\n",
    "        if face is not None:\n",
    "            cv2.rectangle(disp, (10, 60), (10+160, 60+160), (0,255,0), 2)\n",
    "            disp[60:60+160, 10:10+160] = face\n",
    "\n",
    "        frame_placeholder.image(cv2.cvtColor(disp, cv2.COLOR_BGR2RGB), channels=\"RGB\")\n",
    "\n",
    "        if btn_capture:\n",
    "            if face is None:\n",
    "                st.warning(\"No face detected; try again.\")\n",
    "                continue\n",
    "            try:\n",
    "                e_dlib = embed_dlib(face)\n",
    "                if e_dlib is not None: dlib_list.append(e_dlib)\n",
    "            except Exception as e:\n",
    "                st.warning(f\"Dlib embedding error: {e}\")\n",
    "\n",
    "            try:\n",
    "                e_fn = embed_facenet(face)\n",
    "                if e_fn is not None: facenet_list.append(e_fn)\n",
    "            except Exception as e:\n",
    "                st.warning(f\"Facenet embedding error: {e}\")\n",
    "\n",
    "            try:\n",
    "                e_af = embed_arcface(face)\n",
    "                if e_af is not None: arcface_list.append(e_af)\n",
    "            except Exception as e:\n",
    "                st.warning(f\"ArcFace embedding error: {e}\")\n",
    "\n",
    "            try:\n",
    "                e_cv = embed_opencv(face)\n",
    "                if e_cv is not None: opencv_list.append(e_cv)\n",
    "            except Exception as e:\n",
    "                st.warning(f\"OpenCV embedding error: {e}\")\n",
    "\n",
    "            captured += 1\n",
    "            st.info(f\"Captured sample #{captured} (ok: dlib={len(dlib_list)}, facenet={len(facenet_list)}, arcface={len(arcface_list)}, opencv={len(opencv_list)})\")\n",
    "\n",
    "        if btn_finish:\n",
    "            break\n",
    "\n",
    "    cap.release()\n",
    "\n",
    "    if len(dlib_list)==0 and len(facenet_list)==0 and len(arcface_list)==0 and len(opencv_list)==0:\n",
    "        st.error(\"No embeddings captured.\")\n",
    "        return\n",
    "\n",
    "    agg = {}\n",
    "    if len(dlib_list):   agg[\"dlib\"]    = aggregate_embeddings(dlib_list)\n",
    "    if len(facenet_list):agg[\"facenet\"] = aggregate_embeddings(facenet_list)\n",
    "    if len(arcface_list):agg[\"arcface\"] = aggregate_embeddings(arcface_list)\n",
    "    if len(opencv_list): agg[\"opencv\"]  = aggregate_embeddings(opencv_list)\n",
    "\n",
    "    paths = {}\n",
    "    if len(dlib_list):\n",
    "        p = os.path.join(EMBED_FOLDER, f\"{student_id}_dlib.npy\")\n",
    "        np.save(p, np.vstack(dlib_list).astype(np.float32))\n",
    "        paths[\"dlib_file\"] = p\n",
    "    else:\n",
    "        paths[\"dlib_file\"] = \"\"\n",
    "\n",
    "    if len(facenet_list):\n",
    "        p = os.path.join(EMBED_FOLDER, f\"{student_id}_facenet.npy\")\n",
    "        np.save(p, np.vstack(facenet_list).astype(np.float32))\n",
    "        paths[\"facenet_file\"] = p\n",
    "    else:\n",
    "        paths[\"facenet_file\"] = \"\"\n",
    "\n",
    "    if len(arcface_list):\n",
    "        p = os.path.join(EMBED_FOLDER, f\"{student_id}_arcface.npy\")\n",
    "        np.save(p, np.vstack(arcface_list).astype(np.float32))\n",
    "        paths[\"arcface_file\"] = p\n",
    "    else:\n",
    "        paths[\"arcface_file\"] = \"\"\n",
    "\n",
    "    if len(opencv_list):\n",
    "        p = os.path.join(EMBED_FOLDER, f\"{student_id}_opencv.npy\")\n",
    "        np.save(p, np.vstack(opencv_list).astype(np.float32))\n",
    "        paths[\"opencv_file\"] = p\n",
    "    else:\n",
    "        paths[\"opencv_file\"] = \"\"\n",
    "\n",
    "    meta = {\n",
    "        \"student_id\": student_id,\n",
    "        \"name\": name,\n",
    "        \"course\": course,\n",
    "        \"qr_filename\": qr_path,\n",
    "        \"templates\": {k: v.tolist() for k,v in agg.items()}\n",
    "    }\n",
    "    meta_path = os.path.join(META_FOLDER, f\"{student_id}_meta.json\")\n",
    "    with open(meta_path, \"w\", encoding=\"utf-8\") as f:\n",
    "        json.dump(meta, f, ensure_ascii=False, indent=2)\n",
    "\n",
    "    row = {\n",
    "        \"student_id\": student_id,\n",
    "        \"name\": name,\n",
    "        \"course\": course,\n",
    "        \"qr_filename\": qr_path,\n",
    "        \"dlib_file\": paths.get(\"dlib_file\",\"\"),\n",
    "        \"facenet_file\": paths.get(\"facenet_file\",\"\"),\n",
    "        \"arcface_file\": paths.get(\"arcface_file\",\"\"),\n",
    "        \"opencv_file\": paths.get(\"opencv_file\",\"\"),\n",
    "        \"meta_file\": meta_path\n",
    "    }\n",
    "    df = pd.concat([df, pd.DataFrame([row])], ignore_index=True)\n",
    "    df.to_csv(CSV_FILE, index=False)\n",
    "\n",
    "    import pickle\n",
    "    if os.path.exists(\"registered_embeddings.pkl\"):\n",
    "        with open(\"registered_embeddings.pkl\", \"rb\") as f:\n",
    "            registered_db = pickle.load(f)\n",
    "    else:\n",
    "        registered_db = {}\n",
    "\n",
    "    if student_id not in registered_db:\n",
    "        registered_db[student_id] = {\n",
    "            \"name\": name,\n",
    "            \"course\": course,\n",
    "            \"embeddings\": {}\n",
    "        }\n",
    "\n",
    "    for algo, vec in agg.items():\n",
    "        registered_db[student_id][\"embeddings\"][algo] = vec\n",
    "\n",
    "    with open(\"registered_embeddings.pkl\", \"wb\") as f:\n",
    "        pickle.dump(registered_db, f)\n",
    "\n",
    "    st.success(f\"Enrollment complete for {name} ({student_id})\")\n",
    "    st.json(row)\n",
    "    st.info(f\"Aggregated templates in: {meta_path}\")\n",
    "\n",
    "\n",
    "# ==== Streamlit UI ====\n",
    "st.title(\"ðŸŽ“ Student Registration with Multi-Backend Face Embeddings\")\n",
    "\n",
    "with st.form(\"student_form\"):\n",
    "    student_id = st.text_input(\"Student ID\")\n",
    "    name = st.text_input(\"Name\")\n",
    "    course = st.text_input(\"Course\")\n",
    "    submit = st.form_submit_button(\"Start Registration\")\n",
    "\n",
    "if submit:\n",
    "    register_student_capture(student_id, name, course)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (face_env)",
   "language": "python",
   "name": "face_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
